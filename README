A malloc() implementation, written from scratch.

This library implements the malloc(), calloc(), free() and realloc() functions according to the C23 standards. No prior code is used.

The library is thread-safe, which is ensured through the usage of a mutex.

Storage is allocated in a linked list of chunks. Each chunk consists of a header, the payload (that is, usable space for the caller of malloc()), and a tail. The header contains information about the payload size, the tail contains information about the number of free bytes until the next chunk.
The header contains pointers to the next following tail, and the previous tail. The tail contains information to the next following header, and the previous header.
Storage is allocated on one arena (that is, one area of storage) which consists of one heap, the main heap. The arena consists of an arena header, which contains basic information about the arena, such as a pointer to the first chunk, and a pointer to the end of the arena.
The arena is expanded, and contracted, in pages of size 4096 bytes. The rationale for expanding in pages, compared to, say, per-chunk sizes, is to avoid frequent, expensive system calls to sbrk().

The library supports allocation with four different allocation strategies, first-fit, next-fit, best-fit and worst-fit. Benchmarks have shown that next-fit is by far the fastest implementation. On default, first-fit is set as an allocation strategy.
